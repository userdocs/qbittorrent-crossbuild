name: qBitorrent+libtorrent+qt6+crossbuild+package+release
on:
  - workflow_dispatch
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [qbittorrent, qbittorrent-nox]
        os_id: [debian, ubuntu]
        os_version_id: [buster, bullseye, focal, hirsute]
        arch: [amd64, armhf, arm64]
        desktop_gui: ["", -D GUI=OFF]
        qt_features:
          [
            "-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON",
            "-D QT_FEATURE_gui=OFF -D QT_FEATURE_widgets=OFF -D QT_FEATURE_dbus=OFF",
          ]
        include:
          - arch: amd64
            CHOST: "x86_64-linux-gnu"
          - arch: armhf
            CHOST: "arm-linux-gnueabihf"
          - arch: arm64
            CHOST: "aarch64-linux-gnu"
        exclude:
          - os_id: debian
            os_version_id: focal
          - os_id: debian
            os_version_id: hirsute
          - os_id: ubuntu
            os_version_id: buster
          - os_id: ubuntu
            os_version_id: bullseye
          - name: qbittorrent
            desktop_gui: -D GUI=OFF
          - name: qbittorrent-nox
            desktop_gui: ""
          - name: qbittorrent
            qt_features: "-D QT_FEATURE_gui=OFF -D QT_FEATURE_widgets=OFF -D QT_FEATURE_dbus=OFF"
          - name: qbittorrent-nox
            qt_features: "-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON"

    name: ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.name }} ${{ matrix.arch }}
    env:
      libtorrent_branch: RC_2_0
      qbittorrent_branch: master # changes which branch the git checkout command will checkout for qBittorrent
      CHOST: "${{ matrix.CHOST }}"
      CC: "${{ matrix.CHOST }}-gcc"
      AR: "${{ matrix.CHOST }}-ar"
      CXX: "${{ matrix.CHOST }}-g++"
      qt_v_short: "6.2"
      qt_v_tag: "6.2.0"
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Host - Install host qemu-static
        run: sudo apt-get install -y qemu binfmt-support qemu-user-static

      - name: Host - Docker multiarch bootstrap
        run: sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d -w /root -e "LANG=en_US.UTF-8" -e "DEBIAN_FRONTEND=noninteractive" -e CHOST=${{ env.CHOST }} -e CC=${{ env.CC }} -e AR=${{ env.AR }} -e CXX=${{ env.CXX }} -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Docker - fix sources
        if: |
          matrix.os_id == 'ubuntu' && matrix.arch != 'amd64'
        run: |
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }} main restricted universe multiverse" > sources.list'
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }}-updates main restricted universe multiverse" >> sources.list'
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }}-security main restricted universe multiverse" >> sources.list'
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }} main restricted universe multiverse" >> sources.list'
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-updates main restricted universe multiverse" >> sources.list'
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-backports restricted universe multiverse" >> sources.list'
          docker exec -w /etc/apt/ multiarch  bash -c 'echo "deb [arch=amd64] http://security.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-security main restricted universe multiverse" >> sources.list'

      - name: Docker - dpkg configure arch
        run: docker exec multiarch dpkg --add-architecture ${{ matrix.arch }}

      - name: Docker - Run apt-get update
        run: docker exec multiarch apt-get update

      - name: Docker - Run apt-get upgrade
        run: docker exec multiarch apt-get upgrade -y

      - name: Docker - Update again
        run: docker exec multiarch apt-get update

      - name: Docker - apt-get install the core build dependencies
        run: docker exec multiarch apt-get install -y build-essential curl pkg-config automake libtool git perl python3 python3-dev unzip graphviz re2c

      - name: Docker - apt-get install cross target deps
        run: docker exec multiarch apt-get install -y zlib1g-dev:${{ matrix.arch }} libssl-dev:${{ matrix.arch }} crossbuild-essential-${{ matrix.arch }} libgeoip-dev:${{ matrix.arch }} libstdc++-*-dev:${{ matrix.arch }}

      - name: Docker - apt-get install qt gui cross target deps
        if: matrix.qt_features == '-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON'
        run: |
          docker exec multiarch apt-get install -y libglu1-mesa-dev:${{ matrix.arch }} libfontconfig1-dev:${{ matrix.arch }} libfreetype6-dev:${{ matrix.arch }} libx11-dev:${{ matrix.arch }} libx11-xcb-dev:${{ matrix.arch }}
          docker exec multiarch apt-get install -y libxfixes-dev:${{ matrix.arch }} libxi-dev:${{ matrix.arch }} libxrender-dev:${{ matrix.arch }} libxkbcommon-dev:${{ matrix.arch }} libxkbcommon-x11-dev:${{ matrix.arch }}
          docker exec multiarch apt-get install -y libxcb.*-dev:${{ matrix.arch }} libxkbcommon-dev:${{ matrix.arch }} libxkbcommon-x11-dev:${{ matrix.arch }} libxext-dev:${{ matrix.arch }} libicu-dev:${{ matrix.arch }}

      - name: Docker - cmake download and install
        run: |
          docker exec multiarch curl -sNL "https://github.com/Kitware/CMake/releases/download/v3.22.0-rc1/cmake-3.22.0-rc1-linux-x86_64.sh" -o cmake.sh
          docker exec multiarch bash cmake.sh --prefix=/usr/local/ --skip-license --exclude-subdir

      - name: Docker - ninja download and install
        run: |
          docker exec multiarch git clone --shallow-submodules --recurse-submodules https://github.com/ninja-build/ninja.git /root/ninja
          docker exec -w /root/ninja multiarch python3 configure.py --bootstrap --host=linux
          docker exec -w /root/ninja multiarch cp -f "ninja" "/usr/local/bin/ninja"

      - name: Bootstrap the boost files
        run: |
          boost_version="$(git ls-remote -q -t --refs https://github.com/boostorg/boost.git | awk '{sub("refs/tags/boost-", "");sub("(.*)(rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          curl -sNLk https://boostorg.jfrog.io/artifactory/main/release/${boost_version}/source/boost_${boost_version//./_}.tar.gz -o "boost.tar.gz"
          tar xf "boost.tar.gz"
          echo "boost_version=${boost_version//./_}" >> $GITHUB_ENV

      - name: libtorrent - git clone
        run: docker exec multiarch git clone --shallow-submodules --recurse-submodules https://github.com/arvidn/libtorrent.git /root/libtorrent

      - name: libtorrent - git checkout ${{ env.libtorrent_branch }}
        run: docker exec -w /root/libtorrent multiarch git checkout ${{ env.libtorrent_branch }}

      - name: libtorrent - cmake configure
        run: |
          docker exec -w /root/libtorrent multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="Release" \
          -D CMAKE_CXX_STANDARD="17" \
          -D BOOST_INCLUDEDIR="/root/boost_${{ env.boost_version }}/" \
          -D CMAKE_INSTALL_PREFIX="/root/build/usr/local"

      - name: libtorrent - cmake build
        run: docker exec -w /root/libtorrent multiarch cmake --build build

      - name: libtorrent - cmake install
        run: docker exec -w /root/libtorrent multiarch cmake --install build

      - name: Set full libtorrent version to variable using strings
        run: echo "libtorrent_version=$(strings -d build/usr/local/lib/libtorrent-rasterbar.so | sed -rn 's|^libtorrent/(.*)|\1|p' | head -n 1)" >> $GITHUB_ENV

      - name: qt qtbase - curl
        run: |
          docker exec multiarch curl -sNL https://download.qt.io/official_releases/qt/${{ env.qt_v_short }}/${{ env.qt_v_tag }}/submodules/qtbase-everywhere-src-${{ env.qt_v_tag }}.tar.xz -o qtbase.tar.xz
          docker exec multiarch tar xf qtbase.tar.xz

      - name: qt qtbase - cmake configure
        run: |
          docker exec -w /root/qtbase-everywhere-src-${{ env.qt_v_tag }} multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D QT_FEATURE_optimize_full=on \
           ${{ matrix.qt_features }} -D QT_FEATURE_openssl_linked=on -D QT_FEATURE_system_pcre2=off \
          -D QT_FEATURE_testlib=off -D QT_BUILD_EXAMPLES=off -D QT_BUILD_TESTS=off \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="17" \
          -D CMAKE_PREFIX_PATH="/root/build/usr/local;/root/build/opt/QT6" \
          -D CMAKE_INSTALL_PREFIX="/root/build/opt/QT6"

      - name: qt qtbase - cmake build
        run: docker exec -w /root/qtbase-everywhere-src-${{ env.qt_v_tag }} multiarch cmake --build build

      - name: qt qtbase - cmake install
        run: docker exec -w /root/qtbase-everywhere-src-${{ env.qt_v_tag }} multiarch cmake --install build

      - name: qt qtsvg - curl
        run: |
          docker exec multiarch curl -sNL https://download.qt.io/official_releases/qt/${{ env.qt_v_short }}/${{ env.qt_v_tag }}/submodules/qtsvg-everywhere-src-${{ env.qt_v_tag }}.tar.xz -o qtsvg.tar.xz
          docker exec multiarch tar xf qtsvg.tar.xz

      - name: qt qtsvg - cmake configure
        run: |
          docker exec -w /root/qtsvg-everywhere-src-${{ env.qt_v_tag }} multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="17" \
          -D CMAKE_PREFIX_PATH="/root/build/usr/local;/root/build/opt/QT6" \
          -D CMAKE_INSTALL_PREFIX="/root/build/opt/QT6"

      - name: qt qtsvg - cmake build
        run: docker exec -w /root/qtsvg-everywhere-src-${{ env.qt_v_tag }} multiarch cmake --build build

      - name: qt qtsvg - cmake install
        run: docker exec -w /root/qtsvg-everywhere-src-${{ env.qt_v_tag }} multiarch cmake --install build

      - name: qt qttools - curl
        run: |
          docker exec multiarch curl -sNL https://download.qt.io/official_releases/qt/${{ env.qt_v_short }}/${{ env.qt_v_tag }}/submodules/qttools-everywhere-src-${{ env.qt_v_tag }}.tar.xz -o qttools.tar.xz
          docker exec multiarch tar xf qttools.tar.xz

      - name: qt qttools - cmake configure
        run: |
          docker exec -w /root/qttools-everywhere-src-${{ env.qt_v_tag }} multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="17" \
          -D CMAKE_PREFIX_PATH="/root/build/usr/local;/root/build/opt/QT6" \
          -D CMAKE_INSTALL_PREFIX="/root/build/opt/QT6"

      - name: qt qttools - cmake build
        run: docker exec -w /root/qttools-everywhere-src-${{ env.qt_v_tag }} multiarch cmake --build build

      - name: qt qttools - cmake install
        run: docker exec -w /root/qttools-everywhere-src-${{ env.qt_v_tag }} multiarch cmake --install build

      - name: qbittorrent - git clone
        run: docker exec multiarch git clone --shallow-submodules --recurse-submodules https://github.com/qbittorrent/qBittorrent.git /root/qbittorrent

      - name: qbittorrent - git checkout ${{ env.qbittorrent_branch }}
        run: docker exec -w /root/qbittorrent multiarch git checkout ${{ env.qbittorrent_branch }}

      - name: qbittorrent cmake configure
        run: |
          docker exec -w /root/qbittorrent multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D QT6="ON" \
          -D CMAKE_CXX_STANDARD="17" \
          -D CMAKE_PREFIX_PATH="/root/build/usr/local;/root/build/opt/QT6" \
          -D BOOST_INCLUDEDIR="/root/boost_${{ env.boost_version }}/" \
          ${{ matrix.desktop_gui }} \
          -D CMAKE_INSTALL_PREFIX="/root/build/usr/local"

      - name: qbittorrent cmake build
        run: docker exec -w /root/qbittorrent multiarch cmake --build build

      - name: qbittorrent cmake install
        run: docker exec -w /root/qbittorrent multiarch cmake --install build

      - name: Set full qBittorrent version to variable using strings
        run: echo "qbittorrent_version=$(strings -d build/usr/local/bin/${{ matrix.name }} | sed -rn 's|^qBittorrent/(.*)|\1|p' | head -n 1)" >> $GITHUB_ENV

      - name: Set deb dependencies for qbittorrent-nox
        if: matrix.name == 'qbittorrent-nox'
        run: echo "qbittorrent-deb-deps=zlib1g,libgeoip1" >> $GITHUB_ENV

      - name: Set deb dependencies for qbittorrent
        if: matrix.name == 'qbittorrent'
        run: echo "qbittorrent-deb-deps=zlib1g,libgeoip1,libglu1-mesa,libopengl0,libxcb-xinput0"  >> $GITHUB_ENV

      - name: Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          version: "${{ env.qbittorrent_version }}"
          depends: "${{ env.qbittorrent-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_version_id }}"

      - name: Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.qbittorrent_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ env.qbittorrent_version }}-libtorrent-${{ env.libtorrent_version }}-${{ matrix.arch }}"
          path: "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"
          replacesArtifacts: true
          tag: "${{ env.qbittorrent_version }}_${{ env.libtorrent_version }}"
          name: "qBittorrent ${{ env.qbittorrent_version }} libtorrent ${{ env.libtorrent_version }}"
          body: "qBittorrent and qBittorrent-nox built with cmake, qBittorrent github master, libtorrent RC_2_0, QT6 on all supported arches for Debian Buster and Bullseye and Ubuntu Focal and Hirsute"
          allowUpdates: true
          token: "${{ secrets.GITHUB_TOKEN }}"
